generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkId       String   @unique 
  email         String    @unique
  password      String?   
  name          String
  avatarUrl     String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // organizationId String?
  // organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberships Membership[]
  incidentUpdates IncidentUpdate[]
  maintenanceUpdates MaintenanceUpdate[]
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdMaintenances Maintenance[] @relation("UserCreatedMaintenances")
  createdIncidents Incident[] @relation("UserCreatedIncidents")
}

enum UserRole {
  ADMIN
  USER
}

model Organization {
  id            String    @id @default(uuid())
  clerkId   String?  @unique(map: "organization_clerkId_unique")
  name          String
  slug          String    @unique
  logoUrl       String?
  domain        String?
  customCss     String?
  apiKey        String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // users         User[]
  members Membership[]
  services      Service[]
  incidents     Incident[]
  maintenances  Maintenance[]
  subscribers   Subscriber[]
  settings      OrganizationSettings?
  serviceStatusHistories ServiceStatusHistory[]
}

model OrganizationSettings {
  id            String    @id @default(uuid())
  emailEnabled  Boolean   @default(false)
  emailProvider String?
  emailConfig   Json?
  webhookUrl    String?
  webhookSecret String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String    @unique
}



model Service {
  id            String    @id @default(uuid())
  name          String
  description   String?
  status        ServiceStatus @default(OPERATIONAL)
  groupName     String?
  sortOrder     Int       @default(0)
  isPublic      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  incidents     IncidentService[]
  maintenances  MaintenanceService[]
  statusHistories ServiceStatusHistory[] @relation("ServiceToStatusHistory")
}

model ServiceStatusHistory {
  id            String        @id @default(uuid())
  service       Service       @relation("ServiceToStatusHistory", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String
  status        ServiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([serviceId])
  @@index([createdAt])
}
enum ServiceStatus {
  OPERATIONAL
  DEGRADED
  OUTAGE
  MAINTENANCE
  UNKNOWN
}

model Incident {
  id            String    @id @default(uuid())
  title         String
  status        IncidentStatus @default(INVESTIGATING)
  impact        IncidentImpact @default(MINOR)
  startsAt      DateTime  @default(now())
  resolvedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  services      IncidentService[]
  updates       IncidentUpdate[]
  createdBy    User   @relation("UserCreatedIncidents", fields: [createdById], references: [id])
  createdById  String
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentImpact {
  CRITICAL
  MAJOR
  MINOR
  MAINTENANCE
}

model IncidentService {
  id          String    @id @default(uuid())
  incident    Incident  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId  String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  createdAt   DateTime  @default(now())

  @@unique([incidentId, serviceId])
}

model IncidentUpdate {
  id          String    @id @default(uuid())
  status      IncidentStatus
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  incident    Incident  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Maintenance {
  id              String    @id @default(uuid())
  title           String
  status          MaintenanceStatus @default(SCHEDULED)
  scheduledStart  DateTime
  scheduledEnd    DateTime
  createdBy      User        @relation("UserCreatedMaintenances", fields: [createdById], references: [id])
  createdById    String
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  services        MaintenanceService[]
  updates         MaintenanceUpdate[]
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model MaintenanceService {
  id            String    @id @default(uuid())
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  maintenanceId String
  service       Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String
  createdAt     DateTime  @default(now())

  @@unique([maintenanceId, serviceId])
}

model MaintenanceUpdate {
  id            String    @id @default(uuid())
  status        MaintenanceStatus
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  maintenanceId String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model Subscriber {
  id                String    @id @default(uuid())
  email             String
  name              String?
  verified          Boolean   @default(false)
  verificationToken String?
  unsubscribeToken  String    @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId    String

  @@unique([email, organizationId])
}

model Membership {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           UserRole  @default(USER)
  createdAt      DateTime  @default(now())

  @@unique([userId, organizationId])
}